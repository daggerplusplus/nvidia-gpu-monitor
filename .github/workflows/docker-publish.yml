name: Build and Publish Docker Image

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: nvidia-gpu-monitor

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      if: github.event_name != 'pull_request'
      run: |
        docker run --rm -d --name test-container \
          -p 5000:5000 \
          -e TESTING=true \
          ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
        
        sleep 15
        
        # Test basic connectivity first
        echo "Testing basic connectivity..."
        curl -v http://localhost:5000/ || echo "Root endpoint failed, continuing..."
        
        # Test health endpoint specifically
        echo "Testing health endpoint..."
        response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5000/api/v1/health)
        echo "Health endpoint response code: $response"
        
        # Should return 200 in testing mode
        if [ "$response" -eq 200 ]; then
          echo "✅ Container is running and health endpoint is accessible"
          
          # Get the actual health response
          health_response=$(curl -s http://localhost:5000/api/v1/health)
          echo "Health response: $health_response"
        else
          echo "❌ Health endpoint returned unexpected response code: $response"
          docker logs test-container
          exit 1
        fi
        
        docker stop test-container